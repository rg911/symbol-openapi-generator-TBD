openapi: 3.0.2
info:
  version: 0.8.4
  title: Catapult REST Endpoints
  description: OpenAPI Specification of catapult-rest 1.0.20.16
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Account routes
  - name: Block routes
  - name: Chain routes
  - name: Metadata routes
  - name: Mosaic routes
  - name: Multisig routes
  - name: Namespace routes
  - name: Network routes
  - name: Node routes
  - name: Restriction Mosaic routes
  - name: Restriction Account routes
  - name: Receipt routes
  - name: Transaction routes
paths:
  '/account/{accountId}':
    get:
      tags:
        - Account routes
      summary: Get account information
      description: Returns the account information.
      operationId: getAccountInfo
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /account:
    post:
      tags:
        - Account routes
      summary: Get accounts information
      description: Returns the account information for an array of accounts.
      operationId: getAccountsInfo
      requestBody:
        $ref: '#/components/requestBodies/accountIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of accounts information.
                items:
                  $ref: '#/components/schemas/AccountInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/transactions':
    get:
      tags:
        - Account routes
      summary: Get confirmed transactions
      description: Gets an array of transactions for which an account is the sender or receiver.
      operationId: getAccountConfirmedTransactions
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/transactionIdLimit'
        - $ref: '#/components/parameters/ordering'
        - $ref: '#/components/parameters/transactionType'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of confirmed transactions.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/transactions/incoming':
    get:
      tags:
        - Account routes
      summary: Get incoming transactions
      description: |
        Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account
        if the account is the recipient of the transaction.
      operationId: getAccountIncomingTransactions
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/transactionIdLimit'
        - $ref: '#/components/parameters/ordering'
        - $ref: '#/components/parameters/transactionType'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of incoming transactions.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/transactions/outgoing':
    get:
      tags:
        - Account routes
      summary: Get outgoing transactions
      description: |
        Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account
        if the account is the sender of the transaction.
      operationId: getAccountOutgoingTransactions
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/transactionIdLimit'
        - $ref: '#/components/parameters/ordering'
        - $ref: '#/components/parameters/transactionType'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of outgoing transactions.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/transactions/unconfirmed':
    get:
      tags:
        - Account routes
      summary: Get unconfirmed transactions
      description: Gets the array of transactions not included in a block where an account is the sender or receiver.
      operationId: getAccountUnconfirmedTransactions
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/transactionIdLimit'
        - $ref: '#/components/parameters/ordering'
        - $ref: '#/components/parameters/transactionType'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of unconfirmed transactions.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/transactions/partial':
    get:
      tags:
        - Account routes
      summary: Get aggregate bonded transactions information
      description: |
        Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction.
      operationId: getAccountPartialTransactions
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/transactionIdLimit'
        - $ref: '#/components/parameters/ordering'
        - $ref: '#/components/parameters/transactionType'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of aggregate bonded transactions.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/block/{height}':
    get:
      tags:
        - Block routes
      summary: Get block information
      description: Gets a block from the chain that has the given height.
      operationId: getBlockByHeight
      parameters:
        - $ref: '#/components/parameters/height'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/blocks/{height}/limit/{limit}':
    get:
      tags:
        - Block routes
      summary: Get blocks information
      description: Gets up to limit number of blocks after given block height.
      operationId: getBlocksByHeightWithLimit
      parameters:
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of blocks information.
                items:
                  $ref: '#/components/schemas/BlockInfoDTO'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/block/{height}/transactions':
    get:
      tags:
        - Block routes
      summary: Get transactions from a block
      description: Returns an array of transactions included in a block for a given block height.
      operationId: getBlockTransactions
      parameters:
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/transactionIdLimit'
        - $ref: '#/components/parameters/ordering'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of transactions.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/block/{height}/transaction/{hash}/merkle':
    get:
      tags:
        - Block routes
      summary: Get the merkle path for a given a transaction and block
      description: |
        Returns the merkle path for a transaction included in a block.
        The merkle path is the minimum number of nodes needed to calculate the merkle root.

        Steps to calculate the merkle root:
        1. proofHash = hash (leaf).
        2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:
        * a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).
        * b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).
        3. Repeat 2. for every item in the merklePath list.
        4. Compare if the calculated proofHash equals the one recorded in the
        block header (block.transactionsHash) to verify if the transaction was included in the block.
      operationId: getMerkleTransaction
      parameters:
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/transactionHash'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleProofInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /chain/height:
    get:
      tags:
        - Chain routes
      summary: Get the current height of the chain
      description: Returns the current height of the blockchain.
      operationId: getChainHeight
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeightInfoDTO'
  /chain/score:
    get:
      tags:
        - Chain routes
      summary: Get the current score of the chain
      description: |
        Gets the current score of the blockchain. The higher the score, the better the chain.
        During synchronization, nodes try to get the best blockchain in the network.

        The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:

            block score = difficulty − time elapsed since last block
      operationId: getChainScore
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainScoreDTO'
  /network:
    get:
      tags:
        - Network routes
      summary: Get the current network type of the chain
      description: Returns the current network type.
      operationId: getNetworkType
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkTypeDTO'
  /network/fees:
    get:
      tags:
        - Network routes
      summary: Get transaction fees information
      description: |
        Returns information about the average, median, highest and lower fee multiplier over the last "numBlocksTransactionFeeStats".
        The setting "numBlocksTransactionFeeStats" is adjustable via a configuration file (rest/resources/rest.json) per REST instance.
      operationId: getNetworkFees
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkFeesDTO'
  /node/health:
    get:
      tags:
        - Node routes
      summary: Get the node health information
      description: Supplies information regarding the connection and services status.
      operationId: getNodeHealth
      responses:
        '200':
          description: Both API node and database services are reachable from REST server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeHealthInfoDTO'
        '503':
          description: Either API node or database service is unavailable or unreachable from REST server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeHealthInfoDTO'
  /node/info:
    get:
      tags:
        - Node routes
      summary: Get the node information
      description: Supplies additional information about the application running on a node.
      operationId: getNodeInfo
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoDTO'
  /node/time:
    get:
      tags:
        - Node routes
      summary: Get the node time
      description: Gets the node time at the moment the reply was sent and received.
      operationId: getNodeTime
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTimeDTO'
  /node/storage:
    get:
      tags:
        - Node routes
      summary: Get the storage information of the node
      description: Returns storage information about the node.
      operationId: getNodeStorage
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageInfoDTO'
  /node/server:
    get:
      tags:
        - Node routes
      summary: Get the version of the running REST component
      description: Returns the version of the running catapult-rest component.
      operationId: getServerInfo
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoDTO'
  '/transaction/{transactionId}':
    get:
      tags:
        - Transaction routes
      summary: Get transaction information
      description: Returns transaction information given a transactionId or hash.
      operationId: getTransaction
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /transaction:
    post:
      tags:
        - Transaction routes
      summary: Get transactions information
      description: Returns transactions information for a given array of transactionIds.
      operationId: getTransactions
      requestBody:
        $ref: '#/components/requestBodies/transactionIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of transactions information.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
    put:
      tags:
        - Transaction routes
      summary: Announce a new transaction
      description: |
        Announces a transaction to the network.
        We recommended to use the NEM2-SDK to announce transactions as they should be serialized.
      operationId: announceTransaction
      requestBody:
        $ref: '#/components/requestBodies/transactionPayload'
      responses:
        '202':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/transaction/{hash}/status':
    get:
      tags:
        - Transaction routes
      summary: Get transaction status
      description: Returns the transaction status for a given hash.
      operationId: getTransactionStatus
      parameters:
        - $ref: '#/components/parameters/transactionHash'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatusDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /transaction/statuses:
    post:
      tags:
        - Transaction routes
      summary: Get transactions status
      description: Returns an array of transaction statuses for a given array of transaction hashes.
      operationId: getTransactionsStatuses
      requestBody:
        $ref: '#/components/requestBodies/transactionHashes'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of transactions status.
                items:
                  $ref: '#/components/schemas/TransactionStatusDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /transaction/partial:
    put:
      tags:
        - Transaction routes
      summary: Announce an aggregate bonded transaction
      description: Announces an aggregate bonded transaction to the network.
      operationId: announcePartialTransaction
      requestBody:
        $ref: '#/components/requestBodies/transactionPayload'
      responses:
        '202':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /transaction/cosignature:
    put:
      tags:
        - Transaction routes
      summary: Announce a cosignature transaction
      description: Announces a cosignature transaction to the network.
      operationId: announceCosignatureTransaction
      requestBody:
        $ref: '#/components/requestBodies/cosignature'
      responses:
        '202':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/account/{accountId}':
    get:
      tags:
        - Metadata routes
      summary: Get account metadata
      description: Returns the account metadata given an account id.
      operationId: getAccountMetadata
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/metadataIdLimit'
        - $ref: '#/components/parameters/ordering'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataEntriesDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/mosaic/{mosaicId}':
    get:
      tags:
        - Metadata routes
      summary: Get mosaic metadata
      description: Returns the mosaic metadata given a mosaic id.
      operationId: getMosaicMetadata
      parameters:
        - $ref: '#/components/parameters/mosaicId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/metadataIdLimit'
        - $ref: '#/components/parameters/ordering'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataEntriesDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/namespace/{namespaceId}':
    get:
      tags:
        - Metadata routes
      summary: Get namespace metadata
      description: Returns the namespace metadata given a namespace id.
      operationId: getNamespaceMetadata
      parameters:
        - $ref: '#/components/parameters/namespaceId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/metadataIdLimit'
        - $ref: '#/components/parameters/ordering'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataEntriesDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/account/{accountId}/key/{key}':
    get:
      tags:
        - Metadata routes
      summary: Get account metadata
      description: Returns the account metadata given an account id and a key.
      operationId: getAccountMetadataByKey
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/metadataKey'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataEntriesDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/mosaic/{mosaicId}/key/{key}':
    get:
      tags:
        - Metadata routes
      summary: Get mosaic metadata
      description: Returns the mosaic metadata given a mosaic id and a key.
      operationId: getMosaicMetadataByKey
      parameters:
        - $ref: '#/components/parameters/mosaicId'
        - $ref: '#/components/parameters/metadataKey'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataEntriesDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/namespace/{namespaceId}/key/{key}':
    get:
      tags:
        - Metadata routes
      summary: Get namespace metadata
      description: Returns the namespace metadata given a namespace id and a key.
      operationId: getNamespaceMetadataByKey
      parameters:
        - $ref: '#/components/parameters/namespaceId'
        - $ref: '#/components/parameters/metadataKey'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataEntriesDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/account/{accountId}/key/{key}/sender/{publicKey}':
    get:
      tags:
        - Metadata routes
      summary: Get account metadata
      description: 'Returns the account metadata given an account id, a key, and a sender.'
      operationId: getAccountMetadataByKeyAndSender
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/metadataKey'
        - $ref: '#/components/parameters/publicKey'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/mosaic/{mosaicId}/key/{key}/sender/{publicKey}':
    get:
      tags:
        - Metadata routes
      summary: Get mosaic metadata
      description: 'Returns the mosaic metadata given a mosaic id, a key, and a sender.'
      operationId: getMosaicMetadataByKeyAndSender
      parameters:
        - $ref: '#/components/parameters/mosaicId'
        - $ref: '#/components/parameters/metadataKey'
        - $ref: '#/components/parameters/publicKey'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/metadata/namespace/{namespaceId}/key/{key}/sender/{publicKey}':
    get:
      tags:
        - Metadata routes
      summary: Get namespace metadata
      description: 'Returns the namespace metadata given a namespace id, a key, and a sender.'
      operationId: getNamespaceMetadataByKeyAndSender
      parameters:
        - $ref: '#/components/parameters/namespaceId'
        - $ref: '#/components/parameters/metadataKey'
        - $ref: '#/components/parameters/publicKey'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/mosaic/{mosaicId}':
    get:
      tags:
        - Mosaic routes
      summary: Get mosaic information
      description: Gets the mosaic definition for a given mosaic identifier.
      operationId: getMosaic
      parameters:
        - $ref: '#/components/parameters/mosaicId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /mosaic:
    post:
      tags:
        - Mosaic routes
      summary: Get mosaics information for an array of mosaics
      description: Gets an array of mosaic definition.
      operationId: getMosaics
      requestBody:
        $ref: '#/components/requestBodies/mosaicIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of mosaics information.
                items:
                  $ref: '#/components/schemas/MosaicInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/mosaics':
    get:
      tags:
        - Mosaic routes
      summary: Get mosaics created by an account
      description: Gets an array of mosaics created for a given account address.
      operationId: getMosaicsFromAccount
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicsInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /account/mosaics:
    post:
      tags:
        - Mosaic routes
      summary: Get mosaics created for given array of addresses
      description: Gets mosaics created for a given array of addresses.
      operationId: getMosaicsFromAccounts
      requestBody:
        $ref: '#/components/requestBodies/accountIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicsInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/multisig':
    get:
      tags:
        - Multisig routes
      summary: Get multisig account information
      description: Returns the multisig account information.
      operationId: getAccountMultisig
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultisigAccountInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/multisig/graph':
    get:
      tags:
        - Multisig routes
      summary: Get multisig account graph information
      description: Returns the multisig account graph.
      operationId: getAccountMultisigGraph
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MultisigAccountGraphInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/namespace/{namespaceId}':
    get:
      tags:
        - Namespace routes
      summary: Get namespace information
      description: Gets the namespace for a given namespace identifier.
      operationId: getNamespace
      parameters:
        - $ref: '#/components/parameters/namespaceId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/account/{accountId}/namespaces':
    get:
      tags:
        - Namespace routes
      summary: Get namespaces created by an account
      description: Gets an array of namespaces for a given account address.
      operationId: getNamespacesFromAccount
      parameters:
        - $ref: '#/components/parameters/accountId'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/namespaceIdLimit'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacesInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /account/namespaces:
    post:
      tags:
        - Namespace routes
      summary: Get namespaces for given array of addresses
      description: Gets namespaces for a given array of addresses.
      operationId: getNamespacesFromAccounts
      requestBody:
        $ref: '#/components/requestBodies/accountIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacesInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /account/names:
    post:
      tags:
        - Namespace routes
      summary: Get readable names for a set of accountIds
      description: Returns friendly names for accounts.
      operationId: getAccountsNames
      requestBody:
        $ref: '#/components/requestBodies/accountIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsNamesDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /mosaic/names:
    post:
      tags:
        - Namespace routes
      summary: Get readable names for a set of mosaics
      description: Returns friendly names for mosaics.
      operationId: getMosaicsNames
      requestBody:
        $ref: '#/components/requestBodies/mosaicIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicsNamesDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /namespace/names:
    post:
      tags:
        - Namespace routes
      summary: Get readable names for a set of namespaces
      description: Returns friendly names for namespaces.
      operationId: getNamespacesNames
      requestBody:
        $ref: '#/components/requestBodies/namespaceIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of namespace names.
                items:
                  $ref: '#/components/schemas/NamespaceNameDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/block/{height}/receipts':
    get:
      tags:
        - Receipt routes
      summary: Get receipts from a block
      description: Returns the receipts linked to a block.
      operationId: getBlockReceipts
      parameters:
        - $ref: '#/components/parameters/height'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementsDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/block/{height}/receipt/{hash}/merkle':
    get:
      tags:
        - Receipt routes
      summary: Get the merkle path for a given a receipt statement hash and block
      description: |
        Returns the merkle path for a receipt statement or resolution linked to a block.
        The merkle path is the minimum number of nodes needed to calculate the merkle root.

        Steps to calculate the merkle root:
        1. proofHash = hash (leaf).
        2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:
        * a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).
        * b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).
        3. Repeat 2. for every item in the merklePath list.
        4. Compare if the calculated proofHash equals the one recorded in the
        block header (block.receiptsHash) to verify if the statement was linked with the block.
      operationId: getMerkleReceipts
      parameters:
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/receiptHash'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleProofInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/restrictions/account/{accountId}':
    get:
      tags:
        - Restriction Account routes
      summary: Get the account restrictions
      description: Returns the account restrictions for a given account.
      operationId: getAccountRestrictions
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRestrictionsInfoDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /restrictions/account:
    post:
      tags:
        - Restriction Account routes
      summary: Get account restrictions for given array of addresses
      description: Returns the account restrictions for a given array of addresses.
      operationId: getAccountRestrictionsFromAccounts
      requestBody:
        $ref: '#/components/requestBodies/accountIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of account restrictions.
                items:
                  $ref: '#/components/schemas/AccountRestrictionsInfoDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/restrictions/mosaic/{mosaicId}':
    get:
      tags:
        - Restriction Mosaic routes
      summary: Get mosaic global restriction for a given mosaic identifier.
      description: Get mosaic global restriction.
      operationId: getMosaicGlobalRestriction
      parameters:
        - $ref: '#/components/parameters/mosaicId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicGlobalRestrictionDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
    post:
      tags:
        - Restriction Mosaic routes
      summary: Get mosaic address restrictions for a given mosaic and account identifiers array.
      description: Get mosaic address restrictions.
      operationId: getMosaicAddressRestrictions
      parameters:
        - $ref: '#/components/parameters/mosaicId'
      requestBody:
        $ref: '#/components/requestBodies/accountIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of mosaics address restrictions.
                items:
                  $ref: '#/components/schemas/MosaicAddressRestrictionDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  '/restrictions/mosaic/{mosaicId}/address/{accountId}':
    get:
      tags:
        - Restriction Mosaic routes
      summary: Get mosaic address restrictions for a given mosaic and account identifier.
      description: Get mosaic address restriction.
      operationId: getMosaicAddressRestriction
      parameters:
        - $ref: '#/components/parameters/mosaicId'
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicAddressRestrictionDTO'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '409':
          $ref: '#/components/responses/InvalidArgument'
  /restrictions/mosaic:
    post:
      tags:
        - Restriction Mosaic routes
      summary: Get mosaic global restrictions for an array of mosaics.
      description: Get mosaic global restrictions.
      operationId: getMosaicGlobalRestrictions
      requestBody:
        $ref: '#/components/requestBodies/mosaicIds'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of mosaics global restrictions.
                items:
                  $ref: '#/components/schemas/MosaicGlobalRestrictionDTO'
        '400':
          $ref: '#/components/responses/InvalidContent'
        '409':
          $ref: '#/components/responses/InvalidArgument'
externalDocs:
  description: NEM Developer Center
  url: 'https://nemtech.github.io/'
servers:
  - url: 'http://localhost:3000'
components:
  parameters:
    accountId:
      name: accountId
      in: path
      description: Account public key or address enconded using a 32-character set.
      required: true
      schema:
        type: string
    height:
      name: height
      in: path
      description: |
        Block height.
      required: true
      schema:
        $ref: '#/components/schemas/Height'
    limit:
      name: limit
      in: path
      description: |
        Number of elements to be returned.
        The limit should be greater than or equal to "db.pageSizeMin" and not higher than "db.pageSizeMax".
        The settings are adjustable via a configuration file (rest/resources/rest.json) per REST instance.
      required: true
      schema:
        type: integer
        format: int32
    metadataIdLimit:
      name: id
      in: query
      description: Metadata identifier up to which metadata are returned.
      schema:
        type: string
    metadataKey:
      name: key
      in: path
      description: Metadata key.
      required: true
      schema:
        $ref: '#/components/schemas/MetadataKey'
    mosaicId:
      name: mosaicId
      in: path
      description: Mosaic identifier.
      required: true
      schema:
        $ref: '#/components/schemas/MosaicId'
    namespaceId:
      name: namespaceId
      in: path
      description: Namespace identifier.
      required: true
      schema:
        $ref: '#/components/schemas/NamespaceId'
    namespaceIdLimit:
      name: id
      in: query
      description: Namespace identifier up to which transactions are returned.
      schema:
        type: string
    ordering:
      name: ordering
      in: query
      description: |
        Ordering criteria:
        * -id - Descending order by id.
        * id - Ascending order by id.
      schema:
        type: string
        default: '-id'
    pageSize:
      name: pageSize
      in: query
      description: Number of transactions to return for each request.
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 100
        default: 10
    publicKey:
      name: publicKey
      in: path
      description: Account public key.
      required: true
      schema:
        $ref: '#/components/schemas/PublicKey'
    receiptHash:
      name: hash
      in: path
      description: Receipt hash.
      required: true
      schema:
        $ref: '#/components/schemas/Hash256'
    transactionHash:
      name: hash
      in: path
      description: Transaction hash.
      required: true
      schema:
        $ref: '#/components/schemas/Hash256'
    transactionId:
      name: transactionId
      in: path
      description: Transaction identifier or hash.
      required: true
      schema:
        type: string
    transactionIdLimit:
      name: id
      in: query
      description: Transaction identifier up to which transactions are returned.
      schema:
        type: string
    transactionType:
      name: type
      in: query
      description: 'Transaction types to filter by, separated by commas.'
      schema:
        type: string
        example: '16717,16718,16973'
  requestBodies:
    accountIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/accountIds'
      required: false
    cosignature:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/cosignature'
      required: true
    mosaicIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/mosaicIds'
      required: true
    namespaceIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/namespaceIds'
      required: true
    transactionHashes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionHashes'
      required: true
    transactionIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionIds'
      required: true
    transactionPayload:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionPayload'
      required: true
  schemas:
    Address:
      type: string
      format: hex
      description: Address expressed in hexadecimal base.
      example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
    Amount:
      type: x-number-string
      description: Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
      example: 123456
    BlockDuration:
      type: x-number-string
      description: Duration expressed in number of blocks.
      example: 200
    BlockFeeMultiplier:
      type: integer
      format: int32
      description: Fee multiplier applied to transactions contained in block.
      example: 0
    Difficulty:
      type: x-number-string
      description: 'Determines how hard is to harvest a new block, based on previous blocks.'
      example: 100000000000000
    Hash256:
      type: string
      format: hex
      example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
    Height:
      type: x-number-string
      description: Height of the blockchain.
      example: 1
    Importance:
      type: x-number-string
      description: Probability of an account to harvest the next block.
      example: 0
    MetadataKey:
      type: string
      format: hex
      description: 'Metadata key scoped to source, target and type expressed.'
      example: 0DC67FBE1CAD29E3
    MetadataValue:
      type: string
      format: hex
      description: 'Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value).'
    ModelError:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
    MosaicId:
      type: string
      format: hex
      description: Mosaic identifier.
      example: 0DC67FBE1CAD29E3
    Mosaic:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          $ref: '#/components/schemas/MosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
    RestrictionKey:
      type: string
      format: hex
      description: Restriction key.
      example: 0DC67FBE1CAD29E3
    NamespaceId:
      type: string
      format: hex
      description: Namespace identifier.
      example: 85BBEA6CC462B244
    PublicKey:
      type: string
      format: hex
      description: Public key.
      example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
    Score:
      type: x-number-string
      description: |
        Score of the blockchain. During synchronization, nodes try to get the
        blockchain with highest score in the network.
      example: 1683298087010368300
    Signature:
      type: string
      description: Entity's signature generated by the signer.
      example: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
    Timestamp:
      type: x-number-string
      description: Number of seconds elapsed since the creation of the nemesis block.
      example: 108303181802
    UnresolvedAddress:
      type: string
      description: |
        Address expressed in hexadecimal base. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
        regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
      example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
    UnresolvedMosaicId:
      type: string
      format: hex
      description: |
        Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
        is used instead of the real mosaic identifier.
      example: 85BBEA6CC462B244
    UnresolvedMosaic:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
    RestrictionValue:
      type: x-number-string
      description: Restriction value.
      example: 1000
    AccountTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
        - 3
      description: |
        * 0 - Unlinked.
        * 1 - Balance-holding account that is linked to a remote harvester account.
        * 2 - Remote harvester account that is linked to a balance-holding account.
        * 3 - Remote harvester eligible account that is unlinked.
    AccountDTO:
      type: object
      required:
        - address
        - addressHeight
        - publicKey
        - publicKeyHeight
        - accountType
        - linkedAccountKey
        - activityBuckets
        - mosaics
        - importance
        - importanceHeight
      properties:
        address:
          $ref: '#/components/schemas/Address'
        addressHeight:
          $ref: '#/components/schemas/Height'
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        publicKeyHeight:
          $ref: '#/components/schemas/Height'
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'
        linkedAccountKey:
          $ref: '#/components/schemas/PublicKey'
        activityBuckets:
          type: array
          items:
            $ref: '#/components/schemas/ActivityBucketDTO'
        mosaics:
          type: array
          description: Mosaic units owned.
          items:
            $ref: '#/components/schemas/Mosaic'
        importance:
          $ref: '#/components/schemas/Importance'
        importanceHeight:
          $ref: '#/components/schemas/Height'
    AccountInfoDTO:
      type: object
      required:
        - account
      properties:
        account:
          $ref: '#/components/schemas/AccountDTO'
    ActivityBucketDTO:
      type: object
      required:
        - startHeight
        - totalFeesPaid
        - beneficiaryCount
        - rawScore
      description: |
        Supplementary data stored for importance recalculation.
        At each importance recalculation, existing buckets are shifted, the working bucket is finalized and a new working bucketis created.
        Each bucket influences at most five importance recalculations.
      properties:
        startHeight:
          $ref: '#/components/schemas/Height'
        totalFeesPaid:
          type: integer
          format: int64
          description: Fees paid by the account for this bucket.
        beneficiaryCount:
          type: integer
          format: int32
          description: Number of times the account has been a beneficiary for this bucket.
        rawScore:
          type: integer
          format: int64
          description: Importance score for this bucket. This is taken into account to calculate the latest account importance.
    PositionEnum:
      type: string
      enum:
        - left
        - right
      description: Position relative to the proofHash being evaluated.
    BlockDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/VerifiableEntityDTO'
        - $ref: '#/components/schemas/EntityDTO'
        - type: object
          required:
            - height
            - timestamp
            - difficulty
            - previousBlockHash
            - transactionsHash
            - receiptsHash
            - stateHash
            - beneficiaryPublicKey
            - feeMultiplier
          properties:
            height:
              $ref: '#/components/schemas/Height'
            timestamp:
              $ref: '#/components/schemas/Timestamp'
            difficulty:
              $ref: '#/components/schemas/Difficulty'
            previousBlockHash:
              $ref: '#/components/schemas/Hash256'
            transactionsHash:
              $ref: '#/components/schemas/Hash256'
            receiptsHash:
              $ref: '#/components/schemas/Hash256'
            stateHash:
              $ref: '#/components/schemas/Hash256'
            beneficiaryPublicKey:
              $ref: '#/components/schemas/PublicKey'
            feeMultiplier:
              $ref: '#/components/schemas/BlockFeeMultiplier'
    BlockInfoDTO:
      type: object
      required:
        - meta
        - block
      properties:
        meta:
          $ref: '#/components/schemas/BlockMetaDTO'
        block:
          $ref: '#/components/schemas/BlockDTO'
    BlockMetaDTO:
      type: object
      required:
        - hash
        - totalFee
        - generationHash
        - stateHashSubCacheMerkleRoots
        - numTransactions
      properties:
        hash:
          $ref: '#/components/schemas/Hash256'
        totalFee:
          $ref: '#/components/schemas/Amount'
        generationHash:
          $ref: '#/components/schemas/Hash256'
        stateHashSubCacheMerkleRoots:
          type: array
          items:
            $ref: '#/components/schemas/Hash256'
        numTransactions:
          type: integer
          format: int32
          example: 0
        numStatements:
          type: integer
          format: int32
          example: 1
    MerklePathItemDTO:
      type: object
      description: 'Each merkle path item is composed of a hash, and a position relative to the proofHash being evaluated.'
      properties:
        position:
          $ref: '#/components/schemas/PositionEnum'
        hash:
          $ref: '#/components/schemas/Hash256'
    MerkleProofInfoDTO:
      type: object
      properties:
        merklePath:
          type: array
          description: Complementary data needed to calculate the merkle root.
          items:
            $ref: '#/components/schemas/MerklePathItemDTO'
    ChainScoreDTO:
      type: object
      required:
        - scoreHigh
        - scoreLow
      properties:
        scoreHigh:
          $ref: '#/components/schemas/Score'
        scoreLow:
          $ref: '#/components/schemas/Score'
    HeightInfoDTO:
      type: object
      required:
        - height
      properties:
        height:
          $ref: '#/components/schemas/Height'
    NetworkFeesDTO:
      type: object
      required:
        - averageFeeMultiplier
        - medianFeeMultiplier
        - highestFeeMultiplier
        - lowestFeeMultiplier
      properties:
        averageFeeMultiplier:
          type: number
          format: double
          description: Average fee multiplier over the last "numBlocksTransactionFeeStats".
          example: 1
        medianFeeMultiplier:
          type: number
          format: double
          description: Median fee multiplier over the last "numBlocksTransactionFeeStats".
          example: 1
        highestFeeMultiplier:
          $ref: '#/components/schemas/BlockFeeMultiplier'
          description: Highest fee multiplier over the last "numBlocksTransactionFeeStats".
          example: 2
        lowestFeeMultiplier:
          $ref: '#/components/schemas/BlockFeeMultiplier'
          description: Lowest fee multiplier over the last "numBlocksTransactionFeeStats".
          example: 0
    NetworkTypeEnum:
      type: integer
      format: int32
      enum:
        - 104
        - 152
        - 96
        - 144
      description: |
        Network type:
        * 0x60 (96 decimal) - Private network.
        * 0x90 (144 decimal) - Private test network.
        * 0x68 (104 decimal) - Public main network.
        * 0x98 (152 decimal) - Public test network.
      example: 144
    EntityDTO:
      type: object
      required:
        - signerPublicKey
        - version
        - network
        - type
      properties:
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        version:
          type: integer
          format: int32
          description: Entity version.
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
          format: int32
    VerifiableEntityDTO:
      type: object
      required:
        - signature
      properties:
        signature:
          $ref: '#/components/schemas/Signature'
    NetworkTypeDTO:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Network name.
          example: mijinTest
        description:
          type: string
          description: A short text describing the network.
          example: catapult development network
    NodeStatusEnum:
      type: string
      enum:
        - up
        - down
    RolesTypeEnum:
      type: integer
      format: int32
      enum:
        - 1
        - 2
        - 3
      description: |
        Role of the node:
        * 1 - Peer node.
        * 2 - Api node.
        * 3 - Dual node.
      example: 2
    CommunicationTimestampsDTO:
      type: object
      properties:
        sendTimestamp:
          $ref: '#/components/schemas/Timestamp'
        receiveTimestamp:
          $ref: '#/components/schemas/Timestamp'
    NodeHealthDTO:
      type: object
      required:
        - apiNode
        - db
      properties:
        apiNode:
          $ref: '#/components/schemas/NodeStatusEnum'
          description: API node service status.
        db:
          $ref: '#/components/schemas/NodeStatusEnum'
          description: MongoDB service status.
    NodeHealthInfoDTO:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/NodeHealthDTO'
    NodeInfoDTO:
      type: object
      required:
        - version
        - publicKey
        - networkGenerationHash
        - roles
        - port
        - networkIdentifier
        - friendlyName
        - host
      properties:
        version:
          type: integer
          description: Version of the application.
          format: int32
          example: 0
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        networkGenerationHash:
          $ref: '#/components/schemas/Hash256'
        roles:
          $ref: '#/components/schemas/RolesTypeEnum'
        port:
          type: integer
          description: Port used for the communication.
          format: int32
          example: 7900
        networkIdentifier:
          type: integer
          format: int32
          example: 144
        friendlyName:
          type: string
          description: Node friendly name.
          example: api-node-0
        host:
          type: string
          description: Node IP address.
          example: 127.0.0.1
    NodeTimeDTO:
      type: object
      required:
        - communicationTimestamps
      properties:
        communicationTimestamps:
          $ref: '#/components/schemas/CommunicationTimestampsDTO'
    ServerDTO:
      type: object
      required:
        - restVersion
        - sdkVersion
      properties:
        restVersion:
          type: string
          example: 1.0.14
          description: catapult-rest component version.
        sdkVersion:
          type: string
          example: 0.7.14
          description: catapult-sdk component version.
    ServerInfoDTO:
      type: object
      required:
        - serverInfo
      properties:
        serverInfo:
          $ref: '#/components/schemas/ServerDTO'
    StorageInfoDTO:
      type: object
      required:
        - numBlocks
        - numTransactions
        - numAccounts
      properties:
        numBlocks:
          type: integer
          format: int64
          description: Number of blocks stored.
          example: 245053
        numTransactions:
          type: integer
          format: int64
          description: Number of transactions stored.
          example: 58590
        numAccounts:
          type: integer
          format: int64
          description: Number of accounts created.
          example: 177
    TransactionStateTypeEnum:
      type: string
      enum:
        - confirmed
        - unconfirmed
        - failed
        - partial
      description: State of the transaction.
    TransactionStatusTypeEnum:
      type: string
      enum:
        - Success
        - Neutral
        - Failure
        - Failure_Core_Past_Deadline
        - Failure_Core_Future_Deadline
        - Failure_Core_Insufficient_Balance
        - Failure_Core_Too_Many_Transactions
        - Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block
        - Failure_Core_Wrong_Network
        - Failure_Core_Invalid_Address
        - Failure_Core_Invalid_Version
        - Failure_Core_Invalid_Transaction_Fee
        - Failure_Core_Block_Harvester_Ineligible
        - Failure_Core_Zero_Address
        - Failure_Core_Zero_Public_Key
        - Failure_Core_Nonzero_Internal_Padding
        - Failure_Hash_Already_Exists
        - Failure_Signature_Not_Verifiable
        - Failure_AccountLink_Invalid_Action
        - Failure_AccountLink_Link_Already_Exists
        - Failure_AccountLink_Unknown_Link
        - Failure_AccountLink_Inconsistent_Unlink_Data
        - Failure_AccountLink_Remote_Account_Ineligible
        - Failure_AccountLink_Remote_Account_Signer_Prohibited
        - Failure_AccountLink_Remote_Account_Participant_Prohibited
        - Failure_Aggregate_Too_Many_Transactions
        - Failure_Aggregate_No_Transactions
        - Failure_Aggregate_Too_Many_Cosignatures
        - Failure_Aggregate_Redundant_Cosignatures
        - Failure_Aggregate_Ineligible_Cosignatories
        - Failure_Aggregate_Missing_Cosignatures
        - Failure_Aggregate_Transactions_Hash_Mismatch
        - Failure_LockHash_Invalid_Mosaic_Id
        - Failure_LockHash_Invalid_Mosaic_Amount
        - Failure_LockHash_Hash_Already_Exists
        - Failure_LockHash_Unknown_Hash
        - Failure_LockHash_Inactive_Hash
        - Failure_LockHash_Invalid_Duration
        - Failure_LockSecret_Invalid_Hash_Algorithm
        - Failure_LockSecret_Hash_Already_Exists
        - Failure_LockSecret_Proof_Size_Out_Of_Bounds
        - Failure_LockSecret_Secret_Mismatch
        - Failure_LockSecret_Unknown_Composite_Key
        - Failure_LockSecret_Inactive_Secret
        - Failure_LockSecret_Hash_Algorithm_Mismatch
        - Failure_LockSecret_Invalid_Duration
        - Failure_Metadata_Value_Too_Small
        - Failure_Metadata_Value_Too_Large
        - Failure_Metadata_Value_Size_Delta_Too_Large
        - Failure_Metadata_Value_Size_Delta_Mismatch
        - Failure_Metadata_Value_Change_Irreversible
        - Failure_Mosaic_Invalid_Duration
        - Failure_Mosaic_Invalid_Name
        - Failure_Mosaic_Name_Id_Mismatch
        - Failure_Mosaic_Expired
        - Failure_Mosaic_Owner_Conflict
        - Failure_Mosaic_Id_Mismatch
        - Failure_Mosaic_Parent_Id_Conflict
        - Failure_Mosaic_Invalid_Property
        - Failure_Mosaic_Invalid_Flags
        - Failure_Mosaic_Invalid_Divisibility
        - Failure_Mosaic_Invalid_Supply_Change_Action
        - Failure_Mosaic_Invalid_Supply_Change_Amount
        - Failure_Mosaic_Invalid_Id
        - Failure_Mosaic_Modification_Disallowed
        - Failure_Mosaic_Modification_No_Changes
        - Failure_Mosaic_Supply_Immutable
        - Failure_Mosaic_Supply_Negative
        - Failure_Mosaic_Supply_Exceeded
        - Failure_Mosaic_Non_Transferable
        - Failure_Mosaic_Max_Mosaics_Exceeded
        - Failure_Mosaic_Required_Property_Flag_Unset
        - Failure_Multisig_Account_In_Both_Sets
        - Failure_Multisig_Multiple_Deletes
        - Failure_Multisig_Redundant_Modification
        - Failure_Multisig_Unknown_Multisig_Account
        - Failure_Multisig_Not_A_Cosignatory
        - Failure_Multisig_Already_A_Cosignatory
        - Failure_Multisig_Min_Setting_Out_Of_Range
        - Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories
        - Failure_Multisig_Invalid_Modification_Action
        - Failure_Multisig_Max_Cosigned_Accounts
        - Failure_Multisig_Max_Cosignatories
        - Failure_Multisig_Loop
        - Failure_Multisig_Max_Multisig_Depth
        - Failure_Multisig_Operation_Prohibited_By_Account
        - Failure_Namespace_Invalid_Duration
        - Failure_Namespace_Invalid_Name
        - Failure_Namespace_Name_Id_Mismatch
        - Failure_Namespace_Expired
        - Failure_Namespace_Owner_Conflict
        - Failure_Namespace_Id_Mismatch
        - Failure_Namespace_Invalid_Registration_Type
        - Failure_Namespace_Root_Name_Reserved
        - Failure_Namespace_Too_Deep
        - Failure_Namespace_Unknown_Parent
        - Failure_Namespace_Already_Exists
        - Failure_Namespace_Already_Active
        - Failure_Namespace_Eternal_After_Nemesis_Block
        - Failure_Namespace_Max_Children_Exceeded
        - Failure_Namespace_Alias_Invalid_Action
        - Failure_Namespace_Unknown
        - Failure_Namespace_Alias_Already_Exists
        - Failure_Namespace_Unknown_Alias
        - Failure_Namespace_Alias_Inconsistent_Unlink_Type
        - Failure_Namespace_Alias_Inconsistent_Unlink_Data
        - Failure_Namespace_Alias_Invalid_Address
        - Failure_RestrictionAccount_Invalid_Restriction_Flags
        - Failure_RestrictionAccount_Invalid_Modification_Action
        - Failure_RestrictionAccount_Invalid_Modification_Address
        - Failure_RestrictionAccount_Modification_Operation_Type_Incompatible
        - Failure_RestrictionAccount_Redundant_Modification
        - Failure_RestrictionAccount_Invalid_Modification
        - Failure_RestrictionAccount_Modification_Count_Exceeded
        - Failure_RestrictionAccount_No_Modifications
        - Failure_RestrictionAccount_Values_Count_Exceeded
        - Failure_RestrictionAccount_Invalid_Value
        - Failure_RestrictionAccount_Address_Interaction_Prohibited
        - Failure_RestrictionAccount_Mosaic_Transfer_Prohibited
        - Failure_RestrictionAccount_Operation_Type_Prohibited
        - Failure_RestrictionMosaic_Invalid_Restriction_Type
        - Failure_RestrictionMosaic_Previous_Value_Mismatch
        - Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero
        - Failure_RestrictionMosaic_Max_Restrictions_Exceeded
        - Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction
        - Failure_RestrictionMosaic_Unknown_Global_Restriction
        - Failure_RestrictionMosaic_Invalid_Global_Restriction
        - Failure_RestrictionMosaic_Account_Unauthorized
        - Failure_Transfer_Message_Too_Large
        - Failure_Transfer_Out_Of_Order_Mosaics
        - Failure_Chain_Unlinked
        - Failure_Chain_Block_Not_Hit
        - Failure_Chain_Block_Inconsistent_State_Hash
        - Failure_Chain_Block_Inconsistent_Receipts_Hash
        - Failure_Chain_Unconfirmed_Cache_Too_Full
        - Failure_Consumer_Empty_Input
        - Failure_Consumer_Block_Transactions_Hash_Mismatch
        - Neutral_Consumer_Hash_In_Recency_Cache
        - Failure_Consumer_Remote_Chain_Too_Many_Blocks
        - Failure_Consumer_Remote_Chain_Improper_Link
        - Failure_Consumer_Remote_Chain_Duplicate_Transactions
        - Failure_Consumer_Remote_Chain_Unlinked
        - Failure_Consumer_Remote_Chain_Difficulties_Mismatch
        - Failure_Consumer_Remote_Chain_Score_Not_Better
        - Failure_Consumer_Remote_Chain_Too_Far_Behind
        - Failure_Consumer_Remote_Chain_Too_Far_In_Future
        - Failure_Consumer_Batch_Signature_Not_Verifiable
        - Failure_Extension_Partial_Transaction_Cache_Prune
        - Failure_Extension_Partial_Transaction_Dependency_Removed
        - Failure_Extension_Read_Rate_Limit_Exceeded
      description: |
        Status of the transaction:
        * Success -
        * Neutral -
        * Failure -
        * Failure_Core_Past_Deadline - Validation failed because the deadline passed.
        * Failure_Core_Future_Deadline - Validation failed because the deadline is too far in the future.
        * Failure_Core_Insufficient_Balance - Validation failed because the account has an insufficient balance.
        * Failure_Core_Too_Many_Transactions - Validation failed because there are too many transactions in a block.
        * Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block - Validation failed because an entity originated from the nemesis account after the nemesis block.
        * Failure_Core_Wrong_Network - Validation failed because the entity has the wrong network specified.
        * Failure_Core_Invalid_Address - Validation failed because an address is invalid.
        * Failure_Core_Invalid_Version - Validation failed because entity version is invalid.
        * Failure_Core_Invalid_Transaction_Fee - Validation failed because a transaction fee is invalid.
        * Failure_Core_Block_Harvester_Ineligible - Validation failed because a block was harvested by an ineligible harvester.
        * Failure_Core_Zero_Address - Validation failed because an address is zero.
        * Failure_Core_Zero_Public_Key - Validation failed because a public key is zero.
        * Failure_Core_Nonzero_Internal_Padding - Validation failed because internal padding is nonzero.
        * Failure_Hash_Already_Exists -
        * Failure_Signature_Not_Verifiable - Validation failed because the verification of the signature failed.
        * Failure_AccountLink_Invalid_Action - Validation failed because account link action is invalid.
        * Failure_AccountLink_Link_Already_Exists - Validation failed because main account is already linked to another account.
        * Failure_AccountLink_Unknown_Link - Validation failed because main account is not linked to another account.
        * Failure_AccountLink_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link.
        * Failure_AccountLink_Remote_Account_Ineligible - Validation failed because link is attempting to convert ineligible account to remote.
        * Failure_AccountLink_Remote_Account_Signer_Prohibited - Validation failed because remote is not allowed to sign a transaction.
        * Failure_AccountLink_Remote_Account_Participant_Prohibited - Validation failed because remote is not allowed to participate in the transaction.
        * Failure_Aggregate_Too_Many_Transactions - Validation failed because aggregate has too many transactions.
        * Failure_Aggregate_No_Transactions - Validation failed because aggregate does not have any transactions.
        * Failure_Aggregate_Too_Many_Cosignatures - Validation failed because aggregate has too many cosignatures.
        * Failure_Aggregate_Redundant_Cosignatures - Validation failed because redundant cosignatures are present.
        * Failure_Aggregate_Ineligible_Cosignatories - Validation failed because at least one cosignatory is ineligible.
        * Failure_Aggregate_Missing_Cosignatures - Validation failed because at least one required cosignature is missing.
        * Failure_Aggregate_Transactions_Hash_Mismatch - Validation failed because the aggregate transactions hash does not match the calculated value.
        * Failure_LockHash_Invalid_Mosaic_Id - Validation failed because lock does not allow the specified mosaic.
        * Failure_LockHash_Invalid_Mosaic_Amount - Validation failed because lock does not allow the specified amount.
        * Failure_LockHash_Hash_Already_Exists - Validation failed because hash is already present in cache.
        * Failure_LockHash_Unknown_Hash - Validation failed because hash is not present in cache.
        * Failure_LockHash_Inactive_Hash - Validation failed because hash is inactive.
        * Failure_LockHash_Invalid_Duration - Validation failed because duration is too long.
        * Failure_LockSecret_Invalid_Hash_Algorithm - Validation failed because hash algorithm for lock type secret is invalid.
        * Failure_LockSecret_Hash_Already_Exists - Validation failed because hash is already present in cache.
        * Failure_LockSecret_Proof_Size_Out_Of_Bounds - Validation failed because proof is too small or too large.
        * Failure_LockSecret_Secret_Mismatch - Validation failed because secret does not match proof.
        * Failure_LockSecret_Unknown_Composite_Key - Validation failed because composite key is unknown.
        * Failure_LockSecret_Inactive_Secret - Validation failed because secret is inactive.
        * Failure_LockSecret_Hash_Algorithm_Mismatch - Validation failed because hash algorithm does not match.
        * Failure_LockSecret_Invalid_Duration - Validation failed because duration is too long.
        * Failure_Metadata_Value_Too_Small - Validation failed because the metadata value is too small.
        * Failure_Metadata_Value_Too_Large - Validation failed because the metadata value is too large.
        * Failure_Metadata_Value_Size_Delta_Too_Large - Validation failed because the metadata value size delta is larger in magnitude than the value size.
        * Failure_Metadata_Value_Size_Delta_Mismatch - Validation failed because the metadata value size delta does not match expected value based on the current state.
        * Failure_Metadata_Value_Change_Irreversible - Validation failed because a metadata value change (truncation) is irreversible.
        * Failure_Mosaic_Invalid_Duration - Validation failed because the duration has an invalid value.
        * Failure_Mosaic_Invalid_Name - Validation failed because the name is invalid.
        * Failure_Mosaic_Name_Id_Mismatch - Validation failed because the name and id don't match.
        * Failure_Mosaic_Expired - Validation failed because the parent is expired.
        * Failure_Mosaic_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Mosaic_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Mosaic_Parent_Id_Conflict - Validation failed because the existing parent id does not match the supplied parent id.
        * Failure_Mosaic_Invalid_Property - Validation failed because a mosaic property is invalid.
        * Failure_Mosaic_Invalid_Flags - Validation failed because the mosaic flags are invalid.
        * Failure_Mosaic_Invalid_Divisibility - Validation failed because the mosaic divisibility is invalid.
        * Failure_Mosaic_Invalid_Supply_Change_Action - Validation failed because the mosaic supply change action is invalid.
        * Failure_Mosaic_Invalid_Supply_Change_Amount - Validation failed because the mosaic supply change amount is invalid.
        * Failure_Mosaic_Invalid_Id - Validation failed because the mosaic id is invalid.
        * Failure_Mosaic_Modification_Disallowed - Validation failed because mosaic modification is not allowed.
        * Failure_Mosaic_Modification_No_Changes - Validation failed because mosaic modification would not result in any changes.
        * Failure_Mosaic_Supply_Immutable - Validation failed because the mosaic supply is immutable.
        * Failure_Mosaic_Supply_Negative - Validation failed because the resulting mosaic supply is negative.
        * Failure_Mosaic_Supply_Exceeded - Validation failed because the resulting mosaic supply exceeds the maximum allowed value.
        * Failure_Mosaic_Non_Transferable - Validation failed because the mosaic is not transferable.
        * Failure_Mosaic_Max_Mosaics_Exceeded - Validation failed because the credit of the mosaic would exceed the maximum of different mosaics an account is allowed to own.
        * Failure_Mosaic_Required_Property_Flag_Unset - Validation failed because the mosaic has at least one required property flag unset.
        * Failure_Multisig_Account_In_Both_Sets - Validation failed because account is specified to be both added and removed.
        * Failure_Multisig_Multiple_Deletes - Validation failed because multiple removals are present.
        * Failure_Multisig_Redundant_Modification - Validation failed because a modification is redundant.
        * Failure_Multisig_Unknown_Multisig_Account - Validation failed because account is not in multisig cache.
        * Failure_Multisig_Not_A_Cosignatory - Validation failed because account to be removed is not present.
        * Failure_Multisig_Already_A_Cosignatory - Validation failed because account to be added is already a cosignatory.
        * Failure_Multisig_Min_Setting_Out_Of_Range - Validation failed because new minimum settings are out of range.
        * Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories - Validation failed because min settings are larger than number of cosignatories.
        * Failure_Multisig_Invalid_Modification_Action - Validation failed because the modification action is invalid.
        * Failure_Multisig_Max_Cosigned_Accounts - Validation failed because the cosignatory already cosigns the maximum number of accounts.
        * Failure_Multisig_Max_Cosignatories - Validation failed because the multisig account already has the maximum number of cosignatories.
        * Failure_Multisig_Loop - Validation failed because a multisig loop is created.
        * Failure_Multisig_Max_Multisig_Depth - Validation failed because the max multisig depth is exceeded.
        * Failure_Multisig_Operation_Prohibited_By_Account - Validation failed because an operation is not permitted by a multisig account.
        * Failure_Namespace_Invalid_Duration - Validation failed because the duration has an invalid value.
        * Failure_Namespace_Invalid_Name - Validation failed because the name is invalid.
        * Failure_Namespace_Name_Id_Mismatch - Validation failed because the name and id don't match.
        * Failure_Namespace_Expired - Validation failed because the parent is expired.
        * Failure_Namespace_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Namespace_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Namespace_Invalid_Registration_Type - Validation failed because the namespace registration type is invalid.
        * Failure_Namespace_Root_Name_Reserved - Validation failed because the root namespace has a reserved name.
        * Failure_Namespace_Too_Deep - Validation failed because the resulting namespace would exceed the maximum allowed namespace depth.
        * Failure_Namespace_Unknown_Parent - Validation failed because the namespace parent is unknown.
        * Failure_Namespace_Already_Exists - Validation failed because the namespace already exists.
        * Failure_Namespace_Already_Active - Validation failed because the namespace is already active.
        * Failure_Namespace_Eternal_After_Nemesis_Block - Validation failed because an eternal namespace was received after the nemesis block.
        * Failure_Namespace_Max_Children_Exceeded - Validation failed because the maximum number of children for a root namespace was exceeded.
        * Failure_Namespace_Alias_Invalid_Action - Validation failed because alias action is invalid.
        * Failure_Namespace_Unknown - Validation failed because namespace does not exist.
        * Failure_Namespace_Alias_Already_Exists - Validation failed because namespace is already linked to an alias.
        * Failure_Namespace_Unknown_Alias - Validation failed because namespace is not linked to an alias.
        * Failure_Namespace_Alias_Inconsistent_Unlink_Type - Validation failed because unlink type is not consistent with existing alias.
        * Failure_Namespace_Alias_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing alias.
        * Failure_Namespace_Alias_Invalid_Address - Validation failed because aliased address is invalid.
        * Failure_RestrictionAccount_Invalid_Restriction_Flags - Validation failed because the account restriction flags are invalid.
        * Failure_RestrictionAccount_Invalid_Modification_Action - Validation failed because a modification action is invalid.
        * Failure_RestrictionAccount_Invalid_Modification_Address - Validation failed because a modification address is invalid.
        * Failure_RestrictionAccount_Modification_Operation_Type_Incompatible - Validation failed because the operation type is incompatible. *Note*: This indicates that the existing restrictions have a different operation type than that specified in the notification.
        * Failure_RestrictionAccount_Redundant_Modification - Validation failed because a modification is redundant.
        * Failure_RestrictionAccount_Invalid_Modification - Validation failed because a value is not in the container.
        * Failure_RestrictionAccount_Modification_Count_Exceeded - Validation failed because the transaction has too many modifications.
        * Failure_RestrictionAccount_No_Modifications - Validation failed because the transaction has no modifications.
        * Failure_RestrictionAccount_Values_Count_Exceeded - Validation failed because the resulting account restriction has too many values.
        * Failure_RestrictionAccount_Invalid_Value - Validation failed because the account restriction value is invalid.
        * Failure_RestrictionAccount_Address_Interaction_Prohibited - Validation failed because the addresses involved in the transaction are not allowed to interact.
        * Failure_RestrictionAccount_Mosaic_Transfer_Prohibited - Validation failed because the mosaic transfer is prohibited by the recipient.
        * Failure_RestrictionAccount_Operation_Type_Prohibited - Validation failed because the operation type is not allowed to be initiated by the signer.
        * Failure_RestrictionMosaic_Invalid_Restriction_Type - Validation failed because the mosaic restriction type is invalid.
        * Failure_RestrictionMosaic_Previous_Value_Mismatch - Validation failed because specified previous value does not match current value.
        * Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero - Validation failed because specified previous value is nonzero.
        * Failure_RestrictionMosaic_Max_Restrictions_Exceeded - Validation failed because the maximum number of restrictions would be exeeded.
        * Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction - Validation failed because nonexistent restriction cannot be deleted.
        * Failure_RestrictionMosaic_Unknown_Global_Restriction - Validation failed because required global restriction does not exist.
        * Failure_RestrictionMosaic_Invalid_Global_Restriction - Validation failed because mosaic has invalid global restriction.
        * Failure_RestrictionMosaic_Account_Unauthorized - Validation failed because account lacks proper permissions to move mosaic.
        * Failure_Transfer_Message_Too_Large - Validation failed because the message is too large.
        * Failure_Transfer_Out_Of_Order_Mosaics - Validation failed because mosaics are out of order.
        * Failure_Chain_Unlinked - Validation failed because a block was received that did not link with the existing chain.
        * Failure_Chain_Block_Not_Hit - Validation failed because a block was received that is not a hit.
        * Failure_Chain_Block_Inconsistent_State_Hash - Validation failed because a block was received that has an inconsistent state hash.
        * Failure_Chain_Block_Inconsistent_Receipts_Hash - Validation failed because a block was received that has an inconsistent receipts hash.
        * Failure_Chain_Unconfirmed_Cache_Too_Full - Validation failed because the unconfirmed cache is too full.
        * Failure_Consumer_Empty_Input - Validation failed because the consumer input is empty.
        * Failure_Consumer_Block_Transactions_Hash_Mismatch - Validation failed because the block transactions hash does not match the calculated value.
        * Neutral_Consumer_Hash_In_Recency_Cache - Validation failed because an entity hash is present in the recency cache.
        * Failure_Consumer_Remote_Chain_Too_Many_Blocks - Validation failed because the chain part has too many blocks.
        * Failure_Consumer_Remote_Chain_Improper_Link - Validation failed because the chain is internally improperly linked.
        * Failure_Consumer_Remote_Chain_Duplicate_Transactions - Validation failed because the chain part contains duplicate transactions.
        * Failure_Consumer_Remote_Chain_Unlinked - Validation failed because the chain part does not link to the current chain.
        * Failure_Consumer_Remote_Chain_Difficulties_Mismatch - Validation failed because the remote chain difficulties do not match the calculated difficulties.
        * Failure_Consumer_Remote_Chain_Score_Not_Better - Validation failed because the remote chain score is not better.
        * Failure_Consumer_Remote_Chain_Too_Far_Behind - Validation failed because the remote chain is too far behind.
        * Failure_Consumer_Remote_Chain_Too_Far_In_Future - Validation failed because the remote chain timestamp is too far in the future.
        * Failure_Consumer_Batch_Signature_Not_Verifiable - Validation failed because the verification of the signature failed during a batch operation.
        * Failure_Extension_Partial_Transaction_Cache_Prune - Validation failed because the partial transaction was pruned from the temporal cache.
        * Failure_Extension_Partial_Transaction_Dependency_Removed - Validation failed because the partial transaction was pruned from the temporal cache due to its dependency being removed.
        * Failure_Extension_Read_Rate_Limit_Exceeded - Validation failed because socket read rate limit was exceeded.
    TransactionTypeEnum:
      type: integer
      enum:
        - 16716
        - 16705
        - 16961
        - 16717
        - 16973
        - 16718
        - 16974
        - 17230
        - 16708
        - 16964
        - 17220
        - 16725
        - 16712
        - 16722
        - 16978
        - 16720
        - 16976
        - 17232
        - 16721
        - 16977
        - 16724
      description: |
        Type of transaction:
        * 0x414C (16716 decimal) - AccountLinkTransaction.
        * 0x4141 (16705 decimal) - AggregateCompleteTransaction.
        * 0x4241 (16961 decimal) - AggregateBondedTransaction.
        * 0x414D (16717 decimal) - MosaicDefinitionTransaction.
        * 0x424D (16973 decimal) - MosaicSupplyChangeTransaction.
        * 0x414E (16718 decimal) - NamespaceRegistrationTransaction.
        * 0x424E (16974 decimal) - AddressAliasTransaction.
        * 0x434E (17230 decimal) - MosaicAliasTransaction.
        * 0x4144 (16708 decimal) - AccountMetadataTransaction.
        * 0x4244 (16964 decimal) - MosaicMetadataTransaction.
        * 0x4344 (17220 decimal) - NamespaceMetadataTransaction.
        * 0x4155 (16725 decimal) - MultisigAccountModificationTransaction.
        * 0x4148 (16712 decimal) - HashLockTransaction.
        * 0x4152 (16722 decimal) - SecretLockTransaction.
        * 0x4252 (16978 decimal) - SecretProofTransaction.
        * 0x4150 (16720 decimal) - AccountAddressRestrictionTransaction.
        * 0x4250 (16976 decimal) - AccountMosaicRestrictionTransaction.
        * 0x4350 (17232 decimal) - AccountOperationRestrictionTransaction.
        * 0x4151 (16721 decimal) - MosaicGlobalRestrictionTransaction.
        * 0x4251 (16977 decimal) - MosaicAddressRestrictionTransaction.
        * 0x4154 (16724 decimal) - TransferTransaction.
    AnnounceTransactionInfoDTO:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    EmbeddedTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EntityDTO'
        - $ref: '#/components/schemas/TransactionBodyDTO'
    EmbeddedTransactionInfoDTO:
      type: object
      required:
        - meta
        - transaction
      properties:
        meta:
          $ref: '#/components/schemas/EmbeddedTransactionMetaDTO'
        transaction:
          type: object
    EmbeddedTransactionMetaDTO:
      type: object
      required:
        - height
        - aggregateHash
        - aggregateId
        - index
        - id
      properties:
        height:
          $ref: '#/components/schemas/Height'
        aggregateHash:
          $ref: '#/components/schemas/Hash256'
        aggregateId:
          type: string
          description: Identifier of the aggregate transaction.
        index:
          type: integer
          format: int32
          description: Transaction index within the aggregate.
        id:
          type: string
          description: Identifier of the transaction.
    TransactionBodyDTO:
      type: object
      required:
        - maxFee
        - deadline
      properties:
        maxFee:
          $ref: '#/components/schemas/Amount'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
    TransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/VerifiableEntityDTO'
        - $ref: '#/components/schemas/EntityDTO'
        - $ref: '#/components/schemas/TransactionBodyDTO'
    TransactionInfoDTO:
      type: object
      required:
        - meta
        - transaction
      properties:
        meta:
          $ref: '#/components/schemas/TransactionMetaDTO'
        transaction:
          type: object
    TransactionMetaDTO:
      type: object
      required:
        - height
        - hash
        - merkleComponentHash
        - index
        - id
      properties:
        height:
          $ref: '#/components/schemas/Height'
        hash:
          $ref: '#/components/schemas/Hash256'
        merkleComponentHash:
          $ref: '#/components/schemas/Hash256'
        index:
          type: integer
          format: int32
          description: Transaction index within the block.
        id:
          type: string
          description: Identifier of the transaciton
    TransactionStatusDTO:
      type: object
      required:
        - group
        - deadline
        - hash
      properties:
        group:
          $ref: '#/components/schemas/TransactionStateTypeEnum'
        code:
          $ref: '#/components/schemas/TransactionStatusTypeEnum'
        hash:
          $ref: '#/components/schemas/Hash256'
        deadline:
          $ref: '#/components/schemas/BlockDuration'
        height:
          $ref: '#/components/schemas/Height'
    AccountLinkActionEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Type of action:
        * 0 - Unlink.
        * 1 - Link.
    AccountLinkTransactionBodyDTO:
      type: object
      required:
        - remotePublicKey
        - linkAction
      properties:
        remotePublicKey:
          $ref: '#/components/schemas/PublicKey'
        linkAction:
          $ref: '#/components/schemas/AccountLinkActionEnum'
    AccountLinkTransactionDTO:
      type: object
      description: Delegates the account importance score to a proxy account.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/AccountLinkTransactionBodyDTO'
    EmbeddedAccountLinkTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/AccountLinkTransactionBodyDTO'
    AggregateTransactionBodyDTO:
      type: object
      required:
        - transactionsHash
        - cosignatures
        - transactions
      properties:
        transactionsHash:
          $ref: '#/components/schemas/Hash256'
        cosignatures:
          type: array
          description: Array of transaction cosignatures.
          items:
            $ref: '#/components/schemas/CosignatureDTO'
        transactions:
          type: array
          description: Array of transactions initiated by different accounts.
          items:
            $ref: '#/components/schemas/EmbeddedTransactionInfoDTO'
    AggregateTransactionDTO:
      type: object
      description: Transaction to combine multiple transactions together.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/AggregateTransactionBodyDTO'
    CosignatureDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/VerifiableEntityDTO'
        - type: object
          required:
            - signerPublicKey
          properties:
            signerPublicKey:
              $ref: '#/components/schemas/PublicKey'
    EmbeddedHashLockTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/HashLockTransactionBodyDTO'
    HashLockTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - amount
        - duration
        - hash
      properties:
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        hash:
          $ref: '#/components/schemas/Hash256'
    HashLockTransactionDTO:
      type: object
      description: Transaction to lock funds before sending an aggregate bonded transaction.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/HashLockTransactionBodyDTO'
    LockHashAlgorithmEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
        - 3
      description: |
        Algorithm used to hash te proof:
        * 0 (Op_Sha3_256) - Proof is hashed using SHA3-256.
        * 1 (Op_Keccak_256) - Proof is hashed using Keccak (ETH compatibility).
        * 2 (Op_Hash_160) - Proof is hashed twice: first with SHA-256 and then with RIPEMD-160 (bitcoin's OP_HASH160).
        * 3 (Op_Hash_256) - Proof is hashed twice with SHA3-256 (bitcoin's OP_HASH256).
    EmbeddedSecretLockTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/SecretLockTransactionBodyDTO'
    EmbeddedSecretProofTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/SecretProofTransactionBodyDTO'
    SecretLockTransactionBodyDTO:
      type: object
      required:
        - secret
        - mosaicId
        - amount
        - duration
        - hashAlgorithm
        - recipientAddress
      properties:
        secret:
          $ref: '#/components/schemas/Hash256'
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        amount:
          $ref: '#/components/schemas/Amount'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum'
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
    SecretLockTransactionDTO:
      type: object
      description: 'Transaction to sends mosaics to a recipient if the proof used is revealed. If the duration is reached, the locked funds go back to the sender of the transaction.'
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/SecretLockTransactionBodyDTO'
    SecretProofTransactionBodyDTO:
      type: object
      required:
        - secret
        - hashAlgorithm
        - recipientAddress
        - proof
      properties:
        secret:
          $ref: '#/components/schemas/Hash256'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum'
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        proof:
          type: string
          description: Original random set of bytes.
    SecretProofTransactionDTO:
      type: object
      description: Transaction to reveal a proof.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/SecretProofTransactionBodyDTO'
    MetadataTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
      description: |
        Metadata type:
        * 0 - Account.
        * 1 - Mosaic.
        * 2 - Namespace.
    AccountMetadataTransactionBodyDTO:
      type: object
      required:
        - targetPublicKey
        - scopedMetadataKey
        - valueSizeDelta
        - valueSize
        - value
      properties:
        targetPublicKey:
          $ref: '#/components/schemas/PublicKey'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        valueSizeDelta:
          type: integer
          format: int32
          description: Change in value size in bytes.
        valueSize:
          type: integer
          format: int32
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
    AccountMetadataTransactionDTO:
      type: object
      description: Transaction to create or modify a multisig account.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/AccountMetadataTransactionBodyDTO'
    EmbeddedAccountMetadataTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/AccountMetadataTransactionBodyDTO'
    EmbeddedMosaicMetadataTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/MosaicMetadataTransactionBodyDTO'
    EmbeddedNamespaceMetadataTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/NamespaceMetadataTransactionBodyDTO'
    MetadataDTO:
      type: object
      required:
        - id
        - metadataEntry
      properties:
        id:
          type: string
        metadataEntry:
          $ref: '#/components/schemas/MetadataEntryDTO'
    MetadataEntriesDTO:
      type: object
      required:
        - metadataEntries
      properties:
        metadataEntries:
          type: array
          description: Array of account metadata.
          items:
            $ref: '#/components/schemas/MetadataDTO'
    MetadataEntryDTO:
      type: object
      required:
        - compositeHash
        - senderPublicKey
        - targetPublicKey
        - scopedMetadataKey
        - metadataType
        - value
      properties:
        compositeHash:
          $ref: '#/components/schemas/Hash256'
        senderPublicKey:
          $ref: '#/components/schemas/PublicKey'
        targetPublicKey:
          $ref: '#/components/schemas/PublicKey'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetId:
          type: object
        metadataType:
          $ref: '#/components/schemas/MetadataTypeEnum'
        value:
          type: string
          format: hex
          description: Metadata value.
    MosaicMetadataTransactionBodyDTO:
      type: object
      required:
        - targetPublicKey
        - scopedMetadataKey
        - targetMosaicId
        - valueSizeDelta
        - valueSize
        - value
      properties:
        targetPublicKey:
          $ref: '#/components/schemas/PublicKey'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetMosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        valueSizeDelta:
          type: integer
          format: int32
          description: Change in value size in bytes.
        valueSize:
          type: integer
          format: int32
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
    MosaicMetadataTransactionDTO:
      type: object
      description: Transaction to create or modify a multisig account.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/MosaicMetadataTransactionBodyDTO'
    NamespaceMetadataTransactionBodyDTO:
      type: object
      required:
        - targetPublicKey
        - scopedMetadataKey
        - targetMosaicId
        - valueSizeDelta
        - valueSize
        - value
      properties:
        targetPublicKey:
          $ref: '#/components/schemas/PublicKey'
        scopedMetadataKey:
          $ref: '#/components/schemas/MetadataKey'
        targetNamespaceId:
          $ref: '#/components/schemas/NamespaceId'
        valueSizeDelta:
          type: integer
          format: int32
          description: Change in value size in bytes.
        valueSize:
          type: integer
          format: int32
          description: Value size in bytes.
        value:
          $ref: '#/components/schemas/MetadataValue'
    NamespaceMetadataTransactionDTO:
      type: object
      description: Transaction to create or modify a multisig account.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/NamespaceMetadataTransactionBodyDTO'
    MosaicFlagsEnum:
      type: integer
      format: int32
      description: |
        - 0x00 (none) - No flags present.
        - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply.
        - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to and from mosaic owner.
        - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner.
    MosaicSupplyChangeActionEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Direction of the supply change:
        * 0  - Decrease.
        * 1  - Increase.
      example: 0
    EmbeddedMosaicDefinitionTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/MosaicDefinitionTransactionBodyDTO'
    EmbeddedMosaicSupplyChangeTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/MosaicSupplyChangeTransactionBodyDTO'
    MosaicDefinitionTransactionBodyDTO:
      type: object
      required:
        - id
        - duration
        - nonce
        - flags
        - divisibility
      properties:
        id:
          $ref: '#/components/schemas/MosaicId'
        duration:
          $ref: '#/components/schemas/BlockDuration'
        nonce:
          type: integer
          format: int64
          description: Random nonce used to generate the mosaic id.
          example: 0
        flags:
          $ref: '#/components/schemas/MosaicFlagsEnum'
        divisibility:
          type: integer
          format: uint32
          description: |
            Determines up to what decimal place the mosaic can be divided.
            Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
            The divisibility must be in the range of 0 and 6.
    MosaicDefinitionTransactionDTO:
      type: object
      description: Transaction to create a new mosaic.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/MosaicDefinitionTransactionBodyDTO'
    MosaicDTO:
      type: object
      required:
        - id
        - supply
        - startHeight
        - ownerPublicKey
        - ownerAddress
        - revision
        - flags
        - divisibility
        - duration
      properties:
        id:
          $ref: '#/components/schemas/MosaicId'
        supply:
          $ref: '#/components/schemas/Amount'
        startHeight:
          $ref: '#/components/schemas/Height'
        ownerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        ownerAddress:
          $ref: '#/components/schemas/Address'
        revision:
          type: integer
          format: int32
          description: Number of definitions for the same mosaic.
          example: 1
        flags:
          $ref: '#/components/schemas/MosaicFlagsEnum'
        divisibility:
          type: integer
          format: uint32
          description: |
            Determines up to what decimal place the mosaic can be divided.
            Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
            The divisibility must be in the range of 0 and 6.
        duration:
          $ref: '#/components/schemas/BlockDuration'
    MosaicInfoDTO:
      type: object
      required:
        - mosaic
      properties:
        mosaic:
          $ref: '#/components/schemas/MosaicDTO'
    MosaicsInfoDTO:
      type: object
      required:
        - mosaics
      properties:
        mosaics:
          type: array
          description: Array of mosaics information.
          items:
            $ref: '#/components/schemas/MosaicDTO'
    MosaicSupplyChangeTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - delta
        - action
      properties:
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        delta:
          $ref: '#/components/schemas/Amount'
        action:
          $ref: '#/components/schemas/MosaicSupplyChangeActionEnum'
    MosaicSupplyChangeTransactionDTO:
      type: object
      description: Transaction to increase or decrease the supply of a mosaic.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/MosaicSupplyChangeTransactionBodyDTO'
    EmbeddedMultisigAccountModificationTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/MultisigAccountModificationTransactionBodyDTO'
    MultisigAccountGraphInfoDTO:
      type: object
      required:
        - level
        - multisigEntries
      properties:
        level:
          type: integer
          format: int32
          description: Level of the multisig account.
          example: 0
        multisigEntries:
          type: array
          description: Array of multisig accounts for this level.
          items:
            $ref: '#/components/schemas/MultisigAccountInfoDTO'
    MultisigAccountInfoDTO:
      type: object
      required:
        - multisig
      properties:
        multisig:
          $ref: '#/components/schemas/MultisigDTO'
    MultisigAccountModificationTransactionBodyDTO:
      type: object
      required:
        - minRemovalDelta
        - minApprovalDelta
        - publicKeyAdditions
        - publicKeyDeletions
      properties:
        minRemovalDelta:
          type: integer
          format: int32
          description: |
            Number of signatures needed to remove a cosignatory.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
          example: 1
        minApprovalDelta:
          type: integer
          format: int32
          description: |
            Number of signatures needed to approve a transaction.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
          example: 1
        publicKeyAdditions:
          type: array
          description: Array of cosignatory accounts to add.
          items:
            $ref: '#/components/schemas/PublicKey'
        publicKeyDeletions:
          type: array
          description: Array of cosignatory accounts to delete.
          items:
            $ref: '#/components/schemas/PublicKey'
    MultisigAccountModificationTransactionDTO:
      type: object
      description: Transaction to create or modify a multisig account.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/MultisigAccountModificationTransactionBodyDTO'
    MultisigDTO:
      type: object
      required:
        - accountPublicKey
        - accountAddress
        - minApproval
        - minRemoval
        - cosignatoryPublicKeys
        - multisigPublicKeys
      properties:
        accountPublicKey:
          $ref: '#/components/schemas/PublicKey'
        accountAddress:
          $ref: '#/components/schemas/Address'
        minApproval:
          type: integer
          format: int32
          description: Number of signatures needed to approve a transaction.
          example: 2
        minRemoval:
          description: Number of signatures needed to remove a cosignatory.
          type: integer
          format: int32
          example: 1
        cosignatoryPublicKeys:
          type: array
          description: Array of public keys of the cosignatory accounts.
          items:
            $ref: '#/components/schemas/PublicKey'
        multisigPublicKeys:
          type: array
          description: Array of multisig accounts where the account is cosignatory.
          example:
            - 565059F55E68F904214E8BE1D610B5BBEA4CE46CC13D246D45BC1DAE5D32A0D2
          items:
            $ref: '#/components/schemas/PublicKey'
    AliasActionEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Alias action:
        * 0 - Unlink alias.
        * 1 - Link alias.
      example: 0
    AliasTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
      description: |
        Type of alias:
        * 0 - No alias.
        * 1 - Mosaic id alias.
        * 2 - Addres alias.
      example: 0
    NamespaceRegistrationTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Type of namespace:
        * 0 - Root namespace.
        * 1 - Subnamespace.
      example: 0
    AccountNamesDTO:
      type: object
      required:
        - address
        - names
      properties:
        address:
          $ref: '#/components/schemas/Address'
        names:
          type: array
          description: Account linked namespace names.
          example:
            - alias1
            - alias2
          items:
            type: string
    AccountsNamesDTO:
      type: object
      required:
        - accountNames
      properties:
        accountNames:
          type: array
          description: Array of account names.
          items:
            $ref: '#/components/schemas/AccountNamesDTO'
    AddressAliasTransactionBodyDTO:
      type: object
      required:
        - namespaceId
        - address
        - aliasAction
      properties:
        namespaceId:
          $ref: '#/components/schemas/NamespaceId'
        address:
          $ref: '#/components/schemas/Address'
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
    AddressAliasTransactionDTO:
      type: object
      description: Transaction to link a namespace to an account.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/AddressAliasTransactionBodyDTO'
    AliasDTO:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AliasTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        address:
          $ref: '#/components/schemas/Address'
    EmbeddedAddressAliasTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/AddressAliasTransactionBodyDTO'
    EmbeddedMosaicAliasTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/MosaicAliasTransactionBodyDTO'
    EmbeddedNamespaceRegistrationTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/NamespaceRegistrationTransactionBodyDTO'
    MosaicAliasTransactionBodyDTO:
      type: object
      required:
        - namespaceId
        - mosaicId
        - aliasAction
      properties:
        namespaceId:
          $ref: '#/components/schemas/NamespaceId'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
    MosaicAliasTransactionDTO:
      type: object
      description: Transaction to link a namespace to a mosaic.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/MosaicAliasTransactionBodyDTO'
    MosaicNamesDTO:
      type: object
      required:
        - mosaicId
        - names
      properties:
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        names:
          type: array
          description: Mosaic linked namespace names.
          example:
            - cat.currency
          items:
            type: string
    MosaicsNamesDTO:
      type: object
      required:
        - mosaicNames
      properties:
        mosaicNames:
          type: array
          description: Array of mosaic names.
          items:
            $ref: '#/components/schemas/MosaicNamesDTO'
    NamespaceInfoDTO:
      type: object
      required:
        - meta
        - namespace
      properties:
        meta:
          $ref: '#/components/schemas/NamespaceMetaDTO'
        namespace:
          $ref: '#/components/schemas/NamespaceDTO'
    NamespaceMetaDTO:
      type: object
      required:
        - id
        - active
        - index
      properties:
        id:
          type: string
          description: Identifier of the namespace entry.
        active:
          type: boolean
          description: 'If true, the namespace is active.'
        index:
          type: integer
          format: int32
    NamespaceDTO:
      type: object
      required:
        - registrationType
        - depth
        - level0
        - alias
        - parentId
        - ownerPublicKey
        - ownerAddress
        - startHeight
        - endHeight
      properties:
        registrationType:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        depth:
          type: integer
          format: int32
          description: Level of the namespace.
          example: 1
        level0:
          $ref: '#/components/schemas/NamespaceId'
        level1:
          $ref: '#/components/schemas/NamespaceId'
        level2:
          $ref: '#/components/schemas/NamespaceId'
        alias:
          $ref: '#/components/schemas/AliasDTO'
        parentId:
          $ref: '#/components/schemas/NamespaceId'
        ownerPublicKey:
          $ref: '#/components/schemas/PublicKey'
        ownerAddress:
          $ref: '#/components/schemas/Address'
        startHeight:
          $ref: '#/components/schemas/Height'
        endHeight:
          $ref: '#/components/schemas/Height'
    NamespaceNameDTO:
      type: object
      required:
        - id
        - name
      properties:
        parentId:
          $ref: '#/components/schemas/NamespaceId'
        id:
          $ref: '#/components/schemas/NamespaceId'
        name:
          type: string
          description: Namespace name.
          example: cat
    NamespaceRegistrationTransactionBodyDTO:
      type: object
      required:
        - duration
        - parentId
        - id
        - registrationType
        - name
      properties:
        duration:
          $ref: '#/components/schemas/BlockDuration'
        parentId:
          $ref: '#/components/schemas/NamespaceId'
        id:
          $ref: '#/components/schemas/NamespaceId'
        registrationType:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        name:
          type: string
          description: Namespace name.
    NamespaceRegistrationTransactionDTO:
      type: object
      description: Transaction to create or renew a namespace.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/NamespaceRegistrationTransactionBodyDTO'
    NamespacesInfoDTO:
      type: object
      required:
        - namespaces
      properties:
        namespaces:
          type: array
          description: Array of namespaces information.
          items:
            $ref: '#/components/schemas/NamespaceInfoDTO'
    ReceiptTypeEnum:
      type: integer
      format: int32
      enum:
        - 4685
        - 4942
        - 8515
        - 8776
        - 9032
        - 8786
        - 9042
        - 12616
        - 12626
        - 16717
        - 16718
        - 16974
        - 20803
        - 57667
        - 61763
        - 62019
      description: |
        Type of receipt:
        * 0x124D (4685 decimal) - Mosaic_Rental_Fee.
        * 0x134E (4942 decimal) - Namespace_Rental_Fee.
        * 0x2143 (8515 decimal) - Harvest_Fee.
        * 0x2248 (8776 decimal) - LockHash_Completed.
        * 0x2348 (9032 decimal) - LockHash_Expired.
        * 0x2252 (8786 decimal) - LockSecret_Completed.
        * 0x2352 (9042 decimal) - LockSecret_Expired.
        * 0x3148 (12616 decimal) - LockHash_Created.
        * 0x3152 (12626 decimal) - LockSecret_Created.
        * 0x414D (16717 decimal) - Mosaic_Expired.
        * 0x414E (16718 decimal) - Namespace_Expired.
        * 0x424E (16974 decimal) - Namespace_Deleted.
        * 0x5143 (20803 decimal) - Inflation.
        * 0xE143 (57667 decimal) - Transaction_Group.
        * 0xF143 (61763 decimal) - Address_Alias_Resolution.
        * 0xF243 (62019 decimal) - Mosaic_Alias_Resolution.
    BalanceTransferReceiptDTO:
      type: object
      description: Receipt stored when a state change that triggered a mosaic transfer.
      allOf:
        - $ref: '#/components/schemas/ReceiptDTO'
        - type: object
          required:
            - mosaicId
            - amount
            - senderPublicKey
            - recipientAddress
          properties:
            mosaicId:
              $ref: '#/components/schemas/MosaicId'
            amount:
              $ref: '#/components/schemas/Amount'
            senderPublicKey:
              $ref: '#/components/schemas/PublicKey'
            recipientAddress:
              $ref: '#/components/schemas/Address'
    BalanceChangeReceiptDTO:
      type: object
      description: Receipt stored when a state change modified an account balance.
      allOf:
        - $ref: '#/components/schemas/ReceiptDTO'
        - type: object
          required:
            - mosaicId
            - amount
            - targetPublicKey
          properties:
            mosaicId:
              $ref: '#/components/schemas/MosaicId'
            amount:
              $ref: '#/components/schemas/Amount'
            targetPublicKey:
              $ref: '#/components/schemas/PublicKey'
    NamespaceExpiryReceiptDTO:
      type: object
      description: Receipt stored when a namespace expires.
      allOf:
        - $ref: '#/components/schemas/ReceiptDTO'
        - type: object
          required:
            - artifactId
          properties:
            artifactId:
              $ref: '#/components/schemas/NamespaceId'
    MosaicExpiryReceiptDTO:
      type: object
      description: Receipt stored when a mosaic expires.
      allOf:
        - $ref: '#/components/schemas/ReceiptDTO'
        - type: object
          required:
            - artifactId
          properties:
            artifactId:
              $ref: '#/components/schemas/MosaicId'
    InflationReceiptDTO:
      type: object
      description: Receipt stored when network currency mosaics were created due to inflation.
      allOf:
        - $ref: '#/components/schemas/ReceiptDTO'
        - type: object
          required:
            - mosaicId
            - amount
          properties:
            mosaicId:
              $ref: '#/components/schemas/MosaicId'
            amount:
              $ref: '#/components/schemas/Amount'
    ReceiptDTO:
      type: object
      required:
        - version
        - type
      properties:
        version:
          type: integer
          format: int32
          description: Version of the receipt.
        type:
          $ref: '#/components/schemas/ReceiptTypeEnum'
    ResolutionEntryDTO:
      type: object
      required:
        - source
        - resolved
      properties:
        source:
          $ref: '#/components/schemas/SourceDTO'
        resolved:
          type: object
    ResolutionStatementBodyDTO:
      type: object
      required:
        - height
        - unresolved
        - resolutionEntries
      properties:
        height:
          $ref: '#/components/schemas/Height'
        unresolved:
          type: object
        resolutionEntries:
          type: array
          description: |
            Array of resolution entries linked to the unresolved namespaceId.
            It is an array instead of a single resolution entry since
            within one block the resolution might change for different sources due to alias related transactions.
          items:
            $ref: '#/components/schemas/ResolutionEntryDTO'
    ResolutionStatementDTO:
      type: object
      description: |
        A resolution statement keeps the relation between a namespace alias used in a transaction
        and the real address or mosaicId.
      required:
        - statement
      properties:
        statement:
          $ref: '#/components/schemas/ResolutionStatementBodyDTO'
    SourceDTO:
      type: object
      description: Transaction that triggered the receipt.
      required:
        - primaryId
        - secondaryId
      properties:
        primaryId:
          type: integer
          format: int32
          description: Transaction index within the block.
          example: 1
        secondaryId:
          type: integer
          format: int32
          description: |
            Transaction index within the aggregate transaction.
            If the transaction is not an inner transaction, then the secondary id is set to 0.
          example: 0
    StatementsDTO:
      type: object
      description: Collection of transaction statements and resolutions triggered for the block requested.
      required:
        - transactionStatements
        - addressResolutionStatements
        - mosaicResolutionStatements
      properties:
        transactionStatements:
          type: array
          description: Array of transaction statements for the block requested.
          items:
            $ref: '#/components/schemas/TransactionStatementDTO'
        addressResolutionStatements:
          type: array
          description: Array of address resolutions for the block requested.
          items:
            $ref: '#/components/schemas/ResolutionStatementDTO'
        mosaicResolutionStatements:
          type: array
          description: Array of mosaic resolutions for the block requested.
          items:
            $ref: '#/components/schemas/ResolutionStatementDTO'
    TransactionStatementBodyDTO:
      type: object
      required:
        - height
        - source
        - receipts
      properties:
        height:
          $ref: '#/components/schemas/Height'
        source:
          $ref: '#/components/schemas/SourceDTO'
        receipts:
          type: array
          description: Array of receipts.
          items:
            type: object
    TransactionStatementDTO:
      type: object
      description: Collection of receipts related to a transaction.
      required:
        - statement
      properties:
        statement:
          $ref: '#/components/schemas/TransactionStatementBodyDTO'
    AccountRestrictionFlagsEnum:
      type: integer
      format: int32
      example: 1
      enum:
        - 1
        - 2
        - 16385
        - 16388
        - 32769
        - 32770
        - 49153
        - 49156
      description: |
        Type of account restriction:
        * 0x0001 (1 decimal) - Allow only incoming transactions from a given address.
        * 0x0002 (2 decimal) - Allow only incoming transactions containing a given mosaic identifier.
        * 0x4001 (16385 decimal) - Allow only outgoing transactions to a given address.
        * 0x4004 (16388 decimal) - Allow only outgoing transactions with a given transaction type.
        * 0x8001 (32769 decimal) - Block incoming transactions from a given address.
        * 0x8002 (32770 decimal) - Block incoming transactions containing a given mosaic identifier.
        * 0xC001 (49153 decimal) - Block outgoing transactions to a given address.
        * 0xC004 (49156 decimal) - Block outgoing transactions with a given transaction type.
    AccountAddressRestrictionTransactionBodyDTO:
      type: object
      required:
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          description: Account restriction additions.
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
        restrictionDeletions:
          type: array
          description: Account restriction deletions.
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
    AccountAddressRestrictionTransactionDTO:
      type: object
      description: Transaction to prevent incoming and outgoing transactions for a given a set of addresses.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/AccountAddressRestrictionTransactionBodyDTO'
    AccountMosaicRestrictionTransactionBodyDTO:
      type: object
      required:
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          description: Account restriction additions.
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
        restrictionDeletions:
          type: array
          description: Account restriction deletions.
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
    AccountMosaicRestrictionTransactionDTO:
      type: object
      description: Transaction to prevent incoming transactions containing a given set of mosaics.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/AccountMosaicRestrictionTransactionBodyDTO'
    AccountOperationRestrictionTransactionBodyDTO:
      type: object
      required:
        - restrictionFlags
        - restrictionAdditions
        - restrictionDeletions
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          type: array
          description: Account restriction additions.
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
        restrictionDeletions:
          type: array
          description: Account restriction deletions.
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
    AccountOperationRestrictionTransactionDTO:
      type: object
      description: Transaction to prevent outgoing transactions by transaction type.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/AccountOperationRestrictionTransactionBodyDTO'
    AccountRestrictionsInfoDTO:
      type: object
      required:
        - accountRestrictions
      properties:
        accountRestrictions:
          $ref: '#/components/schemas/AccountRestrictionsDTO'
    AccountRestrictionsDTO:
      type: object
      required:
        - address
        - restrictions
      properties:
        address:
          $ref: '#/components/schemas/Address'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/AccountRestrictionDTO'
    AccountRestrictionDTO:
      type: object
      required:
        - restrictionFlags
        - values
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        values:
          type: array
          description: 'Address, mosaic id, or transaction type to restrict.'
          items:
            type: object
    EmbeddedAccountAddressRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/AccountAddressRestrictionTransactionBodyDTO'
    EmbeddedAccountMosaicRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/AccountMosaicRestrictionTransactionBodyDTO'
    EmbeddedAccountOperationRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/AccountOperationRestrictionTransactionBodyDTO'
    MosaicRestrictionEntryTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        - 0 - Mosaic address restriction.
        - 1 - Mosaic global restriction.
    MosaicRestrictionTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      description: |
        Type of mosaic restriction.
        * 0 - Uninitialized value indicating no restriction.
        * 1 (EQ) - Allow if equal.
        * 2 (NE) - Allow if not equal.
        * 3 (LT) - Allow if less than.
        * 4 (LE) - Allow if less than or equal.
        * 5 (GT) - Allow if greater than.
        * 6 (GE) - Allow if greater than or equal.
    EmbeddedMosaicAddressRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/MosaicAddressRestrictionTransactionBodyDTO'
    EmbeddedMosaicGlobalRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/MosaicGlobalRestrictionTransactionBodyDTO'
    MosaicAddressRestrictionDTO:
      type: object
      required:
        - mosaicRestrictionEntry
      properties:
        mosaicRestrictionEntry:
          $ref: '#/components/schemas/MosaicAddressRestrictionEntryWrapperDTO'
    MosaicAddressRestrictionEntryDTO:
      type: object
      required:
        - key
        - value
      properties:
        key:
          $ref: '#/components/schemas/RestrictionKey'
        value:
          type: string
          description: Restriction value.
    MosaicAddressRestrictionEntryWrapperDTO:
      type: object
      required:
        - compositeHash
        - entryType
        - mosaicId
        - targetAddress
        - restrictions
      properties:
        compositeHash:
          $ref: '#/components/schemas/Hash256'
        entryType:
          $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        targetAddress:
          $ref: '#/components/schemas/Address'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/MosaicAddressRestrictionEntryDTO'
    MosaicAddressRestrictionTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - restrictionKey
        - previousRestrictionValue
        - newRestrictionValue
        - targetAddress
      properties:
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        restrictionKey:
          $ref: '#/components/schemas/RestrictionKey'
        previousRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        newRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        targetAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
    MosaicAddressRestrictionTransactionDTO:
      type: object
      description: Transaction to set a restriction rule to an address.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/MosaicAddressRestrictionTransactionBodyDTO'
    MosaicGlobalRestrictionDTO:
      type: object
      required:
        - mosaicRestrictionEntry
      properties:
        mosaicRestrictionEntry:
          $ref: '#/components/schemas/MosaicGlobalRestrictionEntryWrapperDTO'
    MosaicGlobalRestrictionEntryDTO:
      type: object
      required:
        - key
        - restriction
      properties:
        key:
          $ref: '#/components/schemas/RestrictionKey'
        restriction:
          $ref: '#/components/schemas/MosaicGlobalRestrictionEntryRestrictionDTO'
    MosaicGlobalRestrictionEntryRestrictionDTO:
      type: object
      required:
        - referenceMosaicId
        - restrictionValue
        - restrictionType
      properties:
        referenceMosaicId:
          $ref: '#/components/schemas/MosaicId'
        restrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        restrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
    MosaicGlobalRestrictionEntryWrapperDTO:
      type: object
      required:
        - compositeHash
        - entryType
        - mosaicId
        - restrictions
      properties:
        compositeHash:
          $ref: '#/components/schemas/Hash256'
        entryType:
          $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
        mosaicId:
          $ref: '#/components/schemas/MosaicId'
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/MosaicGlobalRestrictionEntryDTO'
    MosaicGlobalRestrictionTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - referenceMosaicId
        - restrictionKey
        - previousRestrictionValue
        - newRestrictionValue
        - previousRestrictionType
        - newRestrictionType
      properties:
        mosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        referenceMosaicId:
          $ref: '#/components/schemas/UnresolvedMosaicId'
        restrictionKey:
          $ref: '#/components/schemas/RestrictionKey'
        previousRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        newRestrictionValue:
          $ref: '#/components/schemas/RestrictionValue'
        previousRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
        newRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
    MosaicGlobalRestrictionTransactionDTO:
      type: object
      description: Transaction to set a network-wide restriction rule to a mosaic.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/MosaicGlobalRestrictionTransactionBodyDTO'
    MessageTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 254
      description: |
        Type of message:
        * 0 - Regular message.
        * 1 - Encrypted message.
        * 254 - Persistent harvesting delegation.
      example: 0
    EmbeddedTransferTransactionDTO:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmbeddedTransactionDTO'
        - $ref: '#/components/schemas/TransferTransactionBodyDTO'
    MessageDTO:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          $ref: '#/components/schemas/MessageTypeEnum'
        payload:
          type: string
          format: hex
          description: Content of the message.
    TransferTransactionBodyDTO:
      type: object
      required:
        - recipientAddress
        - mosaics
        - message
      properties:
        recipientAddress:
          $ref: '#/components/schemas/UnresolvedAddress'
        mosaics:
          type: array
          description: |
            Array of mosaics sent to the recipient.
          items:
            $ref: '#/components/schemas/UnresolvedMosaic'
        message:
          $ref: '#/components/schemas/MessageDTO'
    TransferTransactionDTO:
      type: object
      description: Transaction to transfer mosaics and a message to another account.
      allOf:
        - $ref: '#/components/schemas/TransactionDTO'
        - $ref: '#/components/schemas/TransferTransactionBodyDTO'
    accountIds:
      type: object
      properties:
        publicKeys:
          type: array
          description: Array of public keys.
          items:
            $ref: '#/components/schemas/PublicKey'
        addresses:
          type: array
          description: Array of addresses.
          items:
            type: string
            description: Address encoded using a 32-character set.
            example: SCUSLPL2PLSOABGEP5U4Z4GZFKDAU7TBO3QT777Z
    cosignature:
      type: object
      properties:
        parentHash:
          $ref: '#/components/schemas/Hash256'
        signature:
          $ref: '#/components/schemas/Signature'
        signerPublicKey:
          $ref: '#/components/schemas/PublicKey'
    mosaicIds:
      type: object
      properties:
        mosaicIds:
          type: array
          description: Array of mosaic identifiers.
          items:
            $ref: '#/components/schemas/MosaicId'
    namespaceIds:
      type: object
      properties:
        namespaceIds:
          type: array
          description: Array of namespace identifiers.
          items:
            $ref: '#/components/schemas/NamespaceId'
    transactionHashes:
      type: object
      properties:
        hashes:
          type: array
          description: Array of transaction hashes.
          items:
            $ref: '#/components/schemas/Hash256'
    transactionIds:
      type: object
      properties:
        transactionIds:
          type: array
          description: Array of transaction identifiers.
          items:
            type: string
          example:
            - 59B8DA0F0CB2720001103922
            - 59B8D8E60CB2720001103904
    transactionPayload:
      type: object
      properties:
        payload:
          type: string
          description: Transaction payload.
  responses:
    ResourceNotFound:
      description: ResourceNotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
    InvalidContent:
      description: InvalidContent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
    InvalidArgument:
      description: InvalidArgument
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
